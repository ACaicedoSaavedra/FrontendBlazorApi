@page "/Entregables"

@using System.Net.Http.Json
@using System.Text.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer

<PageTitle>Entregables</PageTitle>

<h3>Gestión de Entregables</h3>
@* ------------- BARRA DE ACCIONES GENERALES ------------- 
    Botones que no están relacionados con el formulario específico
*@
<div class="mb-3 d-flex gap-2">
    @* type="button" evita que estos botones hagan submit del formulario *@
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarEntregables">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@* ------------- MENSAJES DE ESTADO ------------- 
    Muestra mensajes de éxito, error o información al Entregable
    Se usa renderizado condicional (@if) para mostrar solo cuando hay mensaje
*@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    @* La clase CSS viene de la variable claseAviso que cambia según el tipo de mensaje *@
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- 
    EditForm: Componente de Blazor para formularios con valIdación
    - Model: El objeto que se vincula al formulario
    - OnValIdSubmit: Método que se ejecuta cuando el formulario es válIdo y se envía
    - FormName: CRÍTICO - RequerIdo en Blazor Server para Identificar formularios únicos
*@
<h4>Formulario de Entregables</h4>

<EditForm Model="EntregableActual" OnValidSubmit="GuardarSegunEstado" FormName="EntregableForm">
    @* Componentes de validación automática *@
    <DataAnnotationsValidator />  @* Habilita valIdación basada en atributos *@
    <ValidationSummary />         @* Muestra resumen de errores de valIdación *@




    <div class="row g-3">
        <div class="col-md-2">
            <label class="form-label">Id</label>
            <InputNumber class="form-control" @bind-Value="EntregableActual.Id" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Codigo</label>
            <InputText class="form-control" @bind-Value="EntregableActual.Codigo" />
        </div>


        <div class="col-md-5">
            <label class="form-label">Titulo</label>
            <InputText class="form-control" @bind-Value="EntregableActual.Titulo" />
        </div>

        <div class="col-md-2">
            <label class="form-label">Descripcion</label>
            <InputText class="form-control" @bind-Value="EntregableActual.Descripcion" />
         </div>

        <div class="col-md-2">
            <label class="form-label">FechaInicio</label>
            <InputDate class="form-control" @bind-Value="EntregableActual.FechaInicio" />
        </div>
        
        <div class="col-md-2">
            <label class="form-label">FechaFinPrevista</label>
            <InputDate class="form-control" @bind-Value="EntregableActual.FechaFinPrevista" />

        </div>

        <div class="col-md-2">
            <label class="form-label">FechaModificacion</label>
            <InputDate class="form-control" @bind-Value="EntregableActual.FechaModificacion" />
        </div>

        
        
</div>
        
    <div class="mt-3 d-flex flex-wrap gap-2">
        @* 
            type="submit": Este botón envía el formulario y ejecuta OnValIdSubmit
            El texto cambia dinámicamente entre "Crear" y "Actualizar"
        *@
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>

        @* 
            type="button": Botones que NO envían el formulario
            @onclick: Especifica el método C# que se ejecuta al hacer clic
            disabled: Atributo dinámico que habilita/deshabilita según condiciones
        *@
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorId">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarEntregable" disabled="@(!existeEntregable)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarEntregable" disabled="@(!existeEntregable)">Eliminar</button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- 
    Muestra los usuarios en una tabla con renderizado condicional
*@

@* Renderizado condicional: muestra diferentes contenidos según el estado *@
@if (cargando)
{
    <p><em>Cargando Entregables...</em></p>
}
else if (listaEntregable.Count == 0)
{
    <p>No hay Entregables disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Codigo</th>
                <th>Titulo</th>
                <th>Descripcion</th>
                <th>FechaInicio</th>
                <th>FechaFinPrevista</th>
                <th>FechaModificacion</th>
                <th>FechaFinalizacion</th>
            </tr>
        </thead>
        <tbody>
            @* 
                @foreach: Itera sobre la lista y genera HTML para cada elemento
                Cada Entregable (u) se renderiza como una fila
            *@
            @foreach (var u in listaEntregable)
            {
                <tr>
                    @* @ permite usar variables C# dentro de HTML *@
                    <td>@u.Id</td>
                    <td>@u.Codigo</td>
                    <td>@u.Titulo</td>
                    <td>@u.Descripcion</td>
                    <td>@u.FechaFinPrevista</td>
                    <td>@u.FechaFinPrevista</td>
                    <td>@u.FechaModificacion</td>
                    <td>@u.FechaFinalizacion</td>
                    

                    <td>
                        @* 
                            @(() => método(parámetro)): Lambda expression para pasar parámetros
                            Cada botón "sabe" que Entregable carga en el formulario
                        *@
                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                @onclick="@(() => CargarEnFormulario(u))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} 

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================
    
    // Lista que contiene todos los productos para mostrar en la tabla
    private List<Entregable> listaEntregable = new();
    
    // CRÍTICO: [SupplyParameterFromForm] 
    // Este atributo le dice a Blazor que esta propiedad se llena desde el formulario
    // Sin esto, el formulario no funciona correctamente en Blazor Server
    [SupplyParameterFromForm]
    private Entregable EntregableActual { get; set; } = new();
    
    // Bandera que indica si el producto en el formulario ya existe en la base de datos
    // Determina si el botón principal dice "Crear" o "Actualizar"
    private bool existeEntregable = false;
    
    // Texto dinámico del botón principal
    private string textoBotonGuardar = "Crear";
    
    // Variables para mostrar mensajes al Entregable
    private string mensaje = "";
    private string claseAviso = "alert alert-info"; // Clase CSS Bootstrap para el tipo de mensaje
    
    // Indicador visual de carga para mejorar UX
    private bool cargando = false;
    
    // URL base de la API - se complementa con la BaseAddress configurada en Program.cs
    private const string urlBaseApi = "api/Entregable";

    // =============================================================================
    // MÉTODOS DEL CICLO DE VIdA DEL COMPONENTE
    // =============================================================================
    
    /// <summary>
    /// Se ejecuta automáticamente cuando el componente se inicializa
    /// Es async porque necesita esperar la carga de datos de la API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await CargarEntregables();
    }

    // =============================================================================
    // OPERACIONES CRUDL (CREATE, READ, UPDATE, DELETE, LIST)
    // =============================================================================
    
    /// <summary>
    /// LISTAR: Obtiene todos los Entregables de la API
    /// HTTP GET /api/Entregable
    /// </summary>
   private async Task CargarEntregables()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiEntregables");

            var json = await cliente.GetStringAsync(urlBaseApi);

            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            options.Converters.Add(new DateTimeCustomConverter());

            var respuesta = JsonSerializer.Deserialize<RespuestaApi<List<Entregable>>>(json, options);
            listaEntregable = respuesta?.Datos ?? new List<Entregable>();

            mensaje = $"Se cargaron {listaEntregable.Count} Entregable(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al listar Entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        }
    }
    /// <summary>
    /// BUSCAR: Busca un Entregable específico por Id
    /// HTTP GET /api/Entregable/Id/{Id}
    /// </summary>
 private async Task BuscarPorId()
    {
        LimpiarMensajes();

        // ValIdación de entrada
    if (EntregableActual.Id <= 0) 
    {
    mensaje = "Debe indicar un Id válIdo (mayor a 0) para buscar.";
    claseAviso = "alert alert-warning";
    return;
    }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiEntregables");
            
            // Construcción dinámica de la URL con el código
            var ruta = $"{urlBaseApi}/Id/{EntregableActual.Id}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Entregable>>>(ruta);

            // FirstOrDefault: Toma el primer elemento o null si no hay elementos
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                // ENCONTRADO: Carga los datos en el formulario
                EntregableActual = new Entregable
                {
                    Id = encontrado.Id,
                    Codigo = encontrado.Codigo,
                    Titulo = encontrado.Titulo,
                    Descripcion = encontrado.Descripcion,
                    FechaInicio = encontrado.FechaInicio,
                    FechaFinPrevista = encontrado.FechaFinPrevista,
                    FechaModificacion = encontrado.FechaModificacion,
                    FechaFinalizacion = encontrado.FechaFinalizacion

                };
                existeEntregable = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Entregable cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                // NO ENCONTRADO: Resetea el estado a "crear"
                existeEntregable = false;
                textoBotonGuardar = "Crear";
                mensaje = "Entregable no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            // Error: Resetea a estado seguro
            existeEntregable = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar Entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// LÓGICA INTELIGENTE: DecIde si crear o actualizar según el estado
    /// Se ejecuta cuando se envía el formulario (OnValIdSubmit)
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        if (existeEntregable)
            await ActualizarEntregable();
        else
            await CrearEntregable();
    }

    /// <summary>
    /// CREAR: Crea un nuevo Entregable
    /// HTTP POST /api/Entregable
    /// </summary>
    
 private async Task CrearEntregable()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiEntregables");
            
            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, EntregableActual);

            // IsSuccessStatusCode: Verifica códigos HTTP 200-299
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Producto creado correctamente.";
                claseAviso = "alert alert-success";
                
                // Refresca la lista para mostrar el nuevo producto
                await CargarEntregables();
                
                // Limpia el formulario para una nueva creación                
             
                EntregableActual = new Entregable();
                existeEntregable = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                // Error HTTP: Lee el detalle del error
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el Entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear Entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ACTUALIZAR: Actualiza un Entregable existente
    /// HTTP PUT /api/Entregable/Id/{Id}
    /// </summary>
 
   private async Task ActualizarEntregable()
    {
        LimpiarMensajes();

        if (EntregableActual.Id <= 0)
        {
            mensaje = "Debe indicar un **Id válIdo** para actualizar";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiEntregables");

            
            var ruta = $"{urlBaseApi}/Id/{EntregableActual.Id}";

            
            var datos = new Dictionary<string, object?>
            {
                { "Titulo", EntregableActual.Titulo },
                { "Descripcion", EntregableActual.Descripcion },
                { "FechaInicio", EntregableActual.FechaInicio },
                { "FechaFinPrevista", EntregableActual.FechaFinPrevista },
                { "FechaModificacion", EntregableActual.FechaModificacion },
                { "FechaFinalizacion", EntregableActual.FechaFinalizacion }
            };

            var respuesta = await cliente.PutAsJsonAsync(ruta, datos);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Entregable actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarEntregables();
                existeEntregable = true;
                textoBotonGuardar = "Actualizar";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el Entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar Entregable: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    /// <summary>
    /// ELIMINAR: Elimina un Entregable existente
    /// HTTP DELETE /api/Entregable/Id/{Id}
    /// </summary>
private async Task EliminarEntregable()
    {
        LimpiarMensajes();

        if (EntregableActual.Id <= 0)
        {
            mensaje = "Debe indicar el Id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiEntregables");
            
            // DELETE solo necesita el código en la URL
            var ruta = $"{urlBaseApi}/Id/{EntregableActual.Id}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Entregable eliminado correctamente.";
                claseAviso = "alert alert-success";
                
                // Refresca la lista (ya no aparecerá el Entregable eliminado)
                await CargarEntregables();
                
                // Limpia completamente el formulario
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el Entregable. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar Entregables: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // MÉTODOS AUXILIARES Y DE UTILIdAD
    // =============================================================================
    
    /// <summary>
    /// Prueba la conectivIdad con la API sin procesar datos
    /// Útil para diagnóstico de problemas de red
    /// </summary>
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiEntregables");
            
            // Solo hace GET sin deserializar, para probar conectivIdad
            var respuesta = await cliente.GetAsync(urlBaseApi);
            
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga un Entregable de la tabla en el formulario para edición
    /// Se ejecuta cuando el Entregable hace clic en "Cargar" en la tabla
    /// </summary>
    /// <param name="u">El Entregable seleccionado de la tabla</param>

    private void CargarEnFormulario(Entregable u)
    {
        // Crea una NUEVA instancia para evitar referencias compartIdas
        // Si asignaras directamente (EntregableActual = u), cualquier cambio
        // en el formulario modificaría también el objeto en la lista
        EntregableActual = new Entregable
        {
            Id = u.Id,
            Titulo = u.Titulo,
            Descripcion = u.Descripcion,
            FechaInicio = u.FechaInicio,
            FechaFinPrevista = u.FechaFinPrevista,
            FechaModificacion = u.FechaModificacion,
            FechaFinalizacion = u.FechaFinalizacion           
        };
        
        // Cambia el estado a "Entregable existente"
        existeEntregable = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Entregable seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia solo los mensajes de estado, mantiene los datos
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Resetea completamente el formulario a estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        EntregableActual = new Entregable();
        existeEntregable = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}