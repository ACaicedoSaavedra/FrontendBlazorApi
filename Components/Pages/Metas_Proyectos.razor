@page "/Metas_Proyectos"

@using System.Net.Http.Json
@using System.Text.Json
@using FrontendBlazorApi.Models
@inject IHttpClientFactory fabricaHttp
@rendermode InteractiveServer


<PageTitle>Metas Estrategicas</PageTitle>

<h3>Gestión de Metas Estrategicas</h3>
@* ------------- BARRA DE ACCIONES GENERALES ------------- 
    Botones que no están relacionados con el formulario específico
*@
<div class="mb-3 d-flex gap-2">
    @* type="button" evita que estos botones hagan submit del formulario *@
    <button type="button" class="btn btn-outline-secondary" @onclick="ProbarConexion">Probar conexión</button>
    <button type="button" class="btn btn-outline-primary" @onclick="CargarMeta_Proyecto">Mostrar todos</button>
    <button type="button" class="btn btn-outline-dark" @onclick="LimpiarFormulario">Limpiar</button>
</div>

@* ------------- MENSAJES DE ESTADO ------------- 
    Muestra mensajes de éxito, error o información al usuario
    Se usa renderizado condicional (@if) para mostrar solo cuando hay mensaje
*@
@if (!string.IsNullOrWhiteSpace(mensaje))
{
    @* La clase CSS viene de la variable claseAviso que cambia según el tipo de mensaje *@
    <div class="@claseAviso" role="alert">@mensaje</div>
}

@* ------------- FORMULARIO CRUD ------------- 
    EditForm: Componente de Blazor para formularios con validación
    - Model: El objeto que se vincula al formulario
    - OnValidSubmit: Método que se ejecuta cuando el formulario es válido y se envía
    - FormName: CRÍTICO - Requerido en Blazor Server para identificar formularios únicos
*@
<h4>Formulario de Metas por proyectos</h4>

<EditForm Model="Meta_ProyectoActual" OnValidSubmit="GuardarSegunEstado" FormName="Meta_ProyectoForm">
    @* Componentes de validación automática *@
    <DataAnnotationsValidator /> 
    <ValidationSummary />      

     <div class="col-md-2">
    <label class="form-label">Meta Estrategica</label>
    <InputSelect class="form-control" @bind-Value="Meta_ProyectoActual.IdMeta">
        <option value="0">Seleccione una Meta...</option>
        @foreach (var variable in listaMeta)
        {
            <option value="@variable.Id">@variable.Id - @variable.Titulo</option>
        }
    </InputSelect>
    </div>


    <div class="col-md-2">
    <label class="form-label">Proyecto</label>
    <InputSelect class="form-control" @bind-Value="Meta_ProyectoActual.IdProyecto">
        <option value="0">Seleccione un Proyecto...</option>
        @foreach (var variable in listaProyecto)
        {
            <option value="@variable.Id">@variable.Id - @variable.Titulo</option>
        }
    </InputSelect>
    </div>

     <div class="col-md-2">
            <label class="form-label">Fecha de Asociacion</label>
            <InputDate class="form-control" @bind-Value="Meta_ProyectoActual.FechaAsociacion" />
        </div>


        
    <div class="mt-3 d-flex flex-wrap gap-2">
        @* 
            type="submit": Este botón envía el formulario y ejecuta OnValidSubmit
            El texto cambia dinámicamente entre "Crear" y "Actualizar"
        *@
        <button type="submit" class="btn btn-primary">@textoBotonGuardar</button>

        @* 
            type="button": Botones que NO envían el formulario
            @onclick: Especifica el método C# que se ejecuta al hacer clic
            disabled: Atributo dinámico que habilita/deshabilita según condiciones
        *@
        <button type="button" class="btn btn-secondary" @onclick="BuscarPorCodigo">Buscar</button>
        <button type="button" class="btn btn-warning" @onclick="ActualizarMeta_Proyecto" disabled="@(!exiteMeta_Proyecto)">Actualizar</button>
        <button type="button" class="btn btn-danger" @onclick="EliminarMeta_Proyectos" disabled="@(!exiteMeta_Proyecto)">Eliminar</button>
    </div>
</EditForm>

<hr />

@* ------------- LISTADO (READ/LIST) ------------- 
    Muestra los usuarios en una tabla con renderizado condicional
*@

@* Renderizado condicional: muestra diferentes contenidos según el estado *@
@if (cargando)
{
    <p><em>Cargando Metas...</em></p>
}
else if (listarMeta_Proyecto.Count == 0)
{
    <p>No hay Metas disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>IdMeta</th>
                <th>IdProyecto</th>
                <th>FechaAsociacion</th>
            </tr>
        </thead>
        <tbody>
            @* 
                @foreach: Itera sobre la lista y genera HTML para cada elemento
                Cada usuario (u) se renderiza como una fila
            *@
            @foreach (var u in listarMeta_Proyecto)
            {
                <tr>
                    @* @ permite usar variables C# dentro de HTML *@
                    <td>@u.IdMeta</td>
                    <td>@u.IdProyecto</td>
                    <td>@u.FechaAsociacion</td>
                    <td>
                        @* 
                            @(() => método(parámetro)): Lambda expression para pasar parámetros
                            Cada botón "sabe" que usuario carga en el formulario
                        *@
                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                @onclick="@(() => CargarEnFormulario(u))">
                            Cargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
} 

@code {
    // =============================================================================
    // VARIABLES DE ESTADO DEL COMPONENTE
    // =============================================================================
    
    // Lista que contiene todos los productos para mostrar en la tabla
    private List<MetaEstrategica> listaMeta = new();
   private List<Proyecto> listaProyecto = new();
    private List<Meta_Proyecto> listarMeta_Proyecto = new();
    
    // CRÍTICO: [SupplyParameterFromForm] 
    // Este atributo le dice a Blazor que esta propiedad se llena desde el formulario
    // Sin esto, el formulario no funciona correctamente en Blazor Server
    [SupplyParameterFromForm]
    private Meta_Proyecto Meta_ProyectoActual { get; set; } = new();
    
    // Bandera que indica si el producto en el formulario ya existe en la base de datos
    // Determina si el botón principal dice "Crear" o "Actualizar"
    private bool exiteMeta_Proyecto = false;
    
    // Texto dinámico del botón principal
    private string textoBotonGuardar = "Crear";
    
    // Variables para mostrar mensajes al usuario
    private string mensaje = "";
    private string claseAviso = "alert alert-info"; // Clase CSS Bootstrap para el tipo de mensaje
    
    // Indicador visual de carga para mejorar UX
    private bool cargando = false;
    
    // URL base de la API - se complementa con la BaseAddress configurada en Program.cs
    private const string urlBaseApi = "api/Meta_Proyecto";

    // =============================================================================
    // MÉTODOS DEL CICLO DE VIDA DEL COMPONENTE
    // =============================================================================
    
    /// <summary>
    /// Se ejecuta automáticamente cuando el componente se inicializa
    /// Es async porque necesita esperar la carga de datos de la API
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await CargarMeta_Proyecto();
        await CargarMeta();
        await CargarProyecto();
    }

    // =============================================================================
    // OPERACIONES CRUDL (CREATE, READ, UPDATE, DELETE, LIST)
    // =============================================================================
    
    /// <summary>
    /// LISTAR: Obtiene todos los usuarios de la API
    /// HTTP GET /api/usuario
    /// </summary>


     private async Task CargarProyecto()
    {
        try
        {
            var cliente = fabricaHttp.CreateClient("ApiProyectos");
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Proyecto>>>("api/Proyecto");
            if (respuesta?.Datos != null)
            {
                listaProyecto = respuesta.Datos;
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al cargar Proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }



    private async Task CargarMeta()
{
    try
    {
        var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");
        var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<MetaEstrategica>>>("api/MetaEstrategica");
        if (respuesta?.Datos != null)
        {
            listaMeta = respuesta.Datos;
        }
    }
    catch (Exception error)
    {
        mensaje = $"Error al cargar variables: {error.Message}";
        claseAviso = "alert alert-danger";
    }
}

    private async Task CargarMeta_Proyecto()
    {
        try
        {
            cargando = true;
            var cliente = fabricaHttp.CreateClient("ApiEntregables");

            var json = await cliente.GetStringAsync(urlBaseApi);

            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            options.Converters.Add(new DateTimeCustomConverter());

            var respuesta = JsonSerializer.Deserialize<RespuestaApi<List<Meta_Proyecto>>>(json, options);
            listarMeta_Proyecto = respuesta?.Datos ?? new List<Meta_Proyecto>();

            mensaje = $"Se cargaron {listarMeta_Proyecto.Count} Meta_Proyecto(s).";
            claseAviso = "alert alert-success";
        }
        catch (Exception error)
        {
            mensaje = $"Error al listar Meta_Proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
        finally
        {
            cargando = false;
        
        }
    
    }

    /// <summary>
    /// BUSCAR: Busca un usuario específico por Id
    /// HTTP GET /api/usuario/id/{id}
    /// </summary>
 private async Task BuscarPorCodigo()
    {
        LimpiarMensajes();

        // Validación de entrada
    if (Meta_ProyectoActual.IdMeta <= 0) 
    {
    mensaje = "Debe indicar un Id válido.";
    claseAviso = "alert alert-warning";
    return;
    }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");
            
            // Construcción dinámica de la URL con el código
            var ruta = $"{urlBaseApi}/Id/{Meta_ProyectoActual.IdMeta}";
            var respuesta = await cliente.GetFromJsonAsync<RespuestaApi<List<Meta_Proyecto>>>(ruta);

            // FirstOrDefault: Toma el primer elemento o null si no hay elementos
            var encontrado = respuesta?.Datos?.FirstOrDefault();

            if (encontrado is not null)
            {
                // ENCONTRADO: Carga los datos en el formulario
                Meta_ProyectoActual = new Meta_Proyecto
                {
                    IdMeta = encontrado.IdMeta,
                    IdProyecto = encontrado.IdProyecto,
                    FechaAsociacion = encontrado.FechaAsociacion,
                    
                };
                exiteMeta_Proyecto = true;
                textoBotonGuardar = "Actualizar";
                mensaje = "Meta_Proyecto cargado en el formulario.";
                claseAviso = "alert alert-success";
            }
            else
            {
                // NO ENCONTRADO: Resetea el estado a "crear"
                exiteMeta_Proyecto = false;
                textoBotonGuardar = "Crear";
                mensaje = "Meta_Proyecto no encontrado.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            // Error: Resetea a estado seguro
            exiteMeta_Proyecto = false;
            textoBotonGuardar = "Crear";
            mensaje = $"Error al buscar Meta_Proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// LÓGICA INTELIGENTE: Decide si crear o actualizar según el estado
    /// Se ejecuta cuando se envía el formulario (OnValidSubmit)
    /// </summary>
    private async Task GuardarSegunEstado()
    {
        if (exiteMeta_Proyecto)
            await ActualizarMeta_Proyecto();
        else
            await CrearMeta_Proyecto();
    }

    /// <summary>
    /// CREAR: Crea un nuevo usuario
    /// HTTP POST /api/usuario
    /// </summary>
    
 private async Task CrearMeta_Proyecto()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");
            
            // PostAsJsonAsync: Serializa el objeto a JSON y hace POST
            var respuesta = await cliente.PostAsJsonAsync(urlBaseApi, Meta_ProyectoActual);

            // IsSuccessStatusCode: Verifica códigos HTTP 200-299
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Meta_Proyecto creado correctamente.";
                claseAviso = "alert alert-success";
                
                // Refresca la lista para mostrar el nuevo producto
                await CargarMeta_Proyecto();
                
                // Limpia el formulario para una nueva creación                
             
                Meta_ProyectoActual = new Meta_Proyecto();
                exiteMeta_Proyecto = false;
                textoBotonGuardar = "Crear";
            }
            else
            {
                // Error HTTP: Lee el detalle del error
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo crear el Meta_Proyecto. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al crear Meta_Proyecto: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// ACTUALIZAR: Actualiza un Meta_Proyecto existente
    /// HTTP PUT /api/usuario/Id/{Id}
    /// </summary>
 
   private async Task ActualizarMeta_Proyecto()
    {
        LimpiarMensajes();

        if (Meta_ProyectoActual.IdMeta<= 0)
        {
            mensaje = "Debe indicar un Id válido para poder actualizar";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");

            
            var ruta = $"{urlBaseApi}/id/{Meta_ProyectoActual.IdMeta}";

            
            var datos = new Dictionary<string, object?>
            {
                { "IdMeta", Meta_ProyectoActual.IdMeta },
                { "IdProyecto", Meta_ProyectoActual.IdProyecto },
                { "FechaAsociacion", Meta_ProyectoActual.FechaAsociacion }
                
            };

            var respuesta = await cliente.PutAsJsonAsync(ruta, datos);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Meta_Proyectos actualizado correctamente.";
                claseAviso = "alert alert-success";
                await CargarMeta_Proyecto();
                exiteMeta_Proyecto = true;
                textoBotonGuardar = "Actualizar";
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo actualizar el usuario. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al actualizar usuario: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }
    /// <summary>
    /// ELIMINAR: Elimina un usuario existente
    /// HTTP DELETE /api/usuario/codigo/{codigo}
    /// </summary>
private async Task EliminarMeta_Proyectos()
    {
        LimpiarMensajes();

        if (Meta_ProyectoActual.IdMeta <= 0)
        {
            mensaje = "Debe indicar el Id para eliminar.";
            claseAviso = "alert alert-warning";
            return;
        }

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");
            
            // DELETE solo necesita el código en la URL
            var ruta = $"{urlBaseApi}/Id/{Meta_ProyectoActual.IdMeta}";
            var respuesta = await cliente.DeleteAsync(ruta);

            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Usuario eliminado correctamente.";
                claseAviso = "alert alert-success";
                
                // Refresca la lista (ya no aparecerá el Usuario eliminado)
                await CargarMeta_Proyecto();
                
                // Limpia completamente el formulario
                LimpiarFormulario();
            }
            else
            {
                var detalle = await respuesta.Content.ReadAsStringAsync();
                mensaje = $"No se pudo eliminar el usuario. Detalle: {detalle}";
                claseAviso = "alert alert-danger";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error al eliminar usuarios: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    // =============================================================================
    // MÉTODOS AUXILIARES Y DE UTILIDAD
    // =============================================================================
    
    /// <summary>
    /// Prueba la conectividad con la API sin procesar datos
    /// Útil para diagnóstico de problemas de red
    /// </summary>
    private async Task ProbarConexion()
    {
        LimpiarMensajes();

        try
        {
            var cliente = fabricaHttp.CreateClient("ApiMetasEstrategicas");
            
            // Solo hace GET sin deserializar, para probar conectividad
            var respuesta = await cliente.GetAsync(urlBaseApi);
            
            if (respuesta.IsSuccessStatusCode)
            {
                mensaje = "Conexión con la API verificada.";
                claseAviso = "alert alert-success";
            }
            else
            {
                mensaje = $"La API respondió con estado {(int)respuesta.StatusCode}.";
                claseAviso = "alert alert-warning";
            }
        }
        catch (Exception error)
        {
            mensaje = $"Error de conexión a la API: {error.Message}";
            claseAviso = "alert alert-danger";
        }
    }

    /// <summary>
    /// Carga un usuario de la tabla en el formulario para edición
    /// Se ejecuta cuando el usuario hace clic en "Cargar" en la tabla
    /// </summary>
    /// <param name="u">El usuario seleccionado de la tabla</param>

    private void CargarEnFormulario(Meta_Proyecto u)
    {
        // Crea una NUEVA instancia para evitar referencias compartidas
        // Si asignaras directamente (Meta_ProyectoActual = u), cualquier cambio
        // en el formulario modificaría también el objeto en la lista
        Meta_ProyectoActual = new Meta_Proyecto
        {
            IdMeta = u.IdMeta,
            IdProyecto = u.IdProyecto,
            FechaAsociacion = u.FechaAsociacion,
            
        };
        
        // Cambia el estado a "usuario existente"
        exiteMeta_Proyecto = true;
        textoBotonGuardar = "Actualizar";
        mensaje = "Usuario seleccionado desde el listado.";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Limpia solo los mensajes de estado, mantiene los datos
    /// </summary>
    private void LimpiarMensajes()
    {
        mensaje = "";
        claseAviso = "alert alert-info";
    }

    /// <summary>
    /// Resetea completamente el formulario a estado inicial
    /// </summary>
    private void LimpiarFormulario()
    {
        Meta_ProyectoActual = new Meta_Proyecto();
        exiteMeta_Proyecto = false;
        textoBotonGuardar = "Crear";
        LimpiarMensajes();
    }
}